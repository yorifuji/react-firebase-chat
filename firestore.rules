rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // channel
    match /channels/{channel} {
      allow create: if request.auth.uid != null &&
                    incomingData().channelID = request.resource.id &&
                    incomingData().owner == request.auth.uid &&
                    incomingData().keys().size() == 4 &&
                    incomingData().keys().hasAll(["channelID", "owner", "name", "createdAt"]);

      match /posts/{post} {
        allow create: if request.auth.uid != null &&
                      incomingData().owner == request.auth.uid &&
                      incomingData().keys().size() == 5 &&
                      incomingData().keys().hasAll(["owner", "from", "body", "createdAt", "metadata"]);
      }
    }

    match /channels/{channel=**} {
      allow read: if request.auth.uid != null;
    }

    match /channels/{channel} {
      allow update: if request.auth.uid != null &&
                    existingData().owner == request.auth.uid &&
                    incomingData().owner == request.auth.uid &&
                    incomingData().createdAt == existingData().createdAt &&
                    incomingData().keys().size() == 4 &&
                    incomingData().keys().hasAll(["owner", "name", "createdAt", "updatedAt"]);

      match /posts/{post} {
        allow update: if request.auth.uid != null &&
                      existingData().owner == request.auth.uid &&
                      incomingData().owner == request.auth.uid &&
                      incomingData().createdAt == existingData().createdAt &&
                      incomingData().keys().size() == 6 &&
                      incomingData().keys().hasAll(["owner", "from", "body", "createdAt", "metadata", "updatedAt"]);
      }
    }

    match /channels/{channel=**} {
      allow delete: if request.auth.uid != null && existingData().owner == request.auth.uid;
    }

    // /channel/{channel}/posts/{post}/reactions/{reaction}
		match /{path=**}/reactions/{reaction} {
      allow create: if request.auth.uid != null &&
                    incomingData().uid == request.auth.uid &&
                    incomingData().keys().size() == 5 &&
                    incomingData().keys().hasAll(["uid", "channel", "post", "emoji", "createdAt"]);
      allow read: if request.auth.uid != null;
      allow delete: if request.auth.uid != null && existingData().uid == request.auth.uid;
    }

    // /users/{user}
    match /users/{user} {
      allow create: if request.auth.uid != null &&
                    request.resource.id == request.auth.uid &&
                    incomingData().owner == request.auth.uid &&
                    incomingData().keys().size() == 4 &&
                    incomingData().keys().hasAll(["owner", "name", "createdAt", "updatedAt"]);
      allow read : if request.auth.uid != null;
      allow update: if request.auth.uid != null &&
                    request.resource.id == request.auth.uid &&
                    incomingData().owner == request.auth.uid &&
                    incomingData().createdAt == existingData().createdAt &&
                    incomingData().keys().size() == 4 &&
                    incomingData().keys().hasAll(["owner", "name", "createdAt", "updatedAt"]);
      allow delete: if request.auth.uid != null &&
                    request.auth.uid == user;
    }

    // function
    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

  }
}
